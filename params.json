{"name":"GPU Encrypt","tagline":"","body":"[Proposal](proposal.pdf)\r\n\r\n[First Progress Report](FirstProgressReport.pdf)\r\n\r\n[Second Progress Report](SecondProgressReport.pdf)\r\n\r\n### Summary\r\nAttackers who have physical access to mobile phones can potentially uncover private data pertaining to the original user.  Many existing encryption-decryption algorithms like Advanced Encryption Algorithm (AES) have used parallelism to improve the implementation of cryptographic modes.  Recently, frameworks have appeared for performing general-purpose parallel programming on GPUs (GPGPU), such as OpenCL. OpenCL provides a model for programming whereby a host processor (in this case, a CPU) delegates work to be performed in parallel by computing nodes (GPUs).  GPUs are attractive for parallel processing because these architectures have hundreds of processing cores and high bandwidth, delivering higher computing power from the same silicon area as a comparable microprocessor and using only a fraction of the power per calculation.\r\n\r\n### Goal\r\nThe Nexus 4 phone from Google uses a Qualcomm Snapdragon S4 chipset which supports the OpenCL Embedded Profile, and comes with an Adreno 320 GPU.  We will investigate the trade-offs in computational time and power consumption that can be achieved on the Nexus 4 when comparing a software implementation of the AES encryption algorithm to an OpenCL GPU implementation.  Further, we will provide a framework through which regions of physical memory belonging to processes on the Nexus 4 can be encrypted when they are in an idle state, and investigate the overhead paid in battery consumption.\r\n\r\n### Authors and Contributors\r\nJames Gleeson (@jagleeso) jagleeso@gmail.com\r\n\r\nSreekumar Rajan (@sreekumarrajan) sreekumar.rajan@gmail.com\r\n\r\nVandana Saini (@vsaini123) vsaini@cs.toronto.edu","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}